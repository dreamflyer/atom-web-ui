var AceCompleter = (function () {
    function AceCompleter(editor, provider) {
        this.tooltipId = 'suggestion-description';
        this.editor = editor;
        this.provider = provider;
    }
    AceCompleter.prototype.getCompletions = function (editor, session, position, prefix, callback) {
        this.handlePopup(this.editor.aceEditor.completer);
        var _this = this;
        if (prefix) {
            var completionsList = this.getCompletionsList(prefix);
            var convertedList = (completionsList ? completionsList : []).map(function (suggestion) {
                var text = suggestion.text;
                var index = text.lastIndexOf(':');
                if (index > 0 && text.length === index + 1) {
                    text = text.substr(0, text.lastIndexOf(':'));
                }
                return { name: "", value: text, score: 1, meta: "", description: suggestion.description, prefix: prefix };
            });
            callback(null, convertedList);
            return;
        }
        callback(null, []);
    };
    AceCompleter.prototype.handlePopup = function (completer) {
        var _this = this;
        var popup;
        var showDescription = function (popup) { return _this.showDescription(popup); };
        var hideDescription = function () { return _this.hideDescription(); };
        if (completer.popup) {
            return;
        }
        Object.defineProperty(completer, "popup", {
            configurable: true,
            set: function (value) {
                popup = value;
                popup.on('select', function (event) {
                    showDescription(popup);
                });
                popup.on('show', function (event) {
                    showDescription(popup);
                });
                popup.on('hide', function (event) {
                    hideDescription();
                });
            },
            get: function () {
                return popup;
            }
        });
    };
    AceCompleter.prototype.showDescription = function (popup) {
        var data = popup.getData(popup.getSelection().getCursor().row);
        if (!data || !data.description || data.description.length === 0) {
            this.hideDescription();
            return;
        }
        var element = document.getElementById(this.tooltipId);
        if (!element) {
            element = document.createElement('div');
            element.id = this.tooltipId;
            element.className = this.tooltipId;
            var left = popup.container.offsetLeft;
            var top = popup.container.offsetTop;
            var width = popup.container.offsetWidth;
            var height = popup.container.offsetHeight;
            element.style.left = left + 'px';
            element.style.top = (top + height) + 'px';
            element.style.width = width + 'px';
            element.style.zIndex = '100';
            document.body.appendChild(element);
        }
        element.innerHTML = '<span>' + data.description + '</span>';
    };
    AceCompleter.prototype.hideDescription = function () {
        var tooltip = document.getElementById(this.tooltipId);
        if (tooltip) {
            document.body.removeChild(tooltip);
        }
    };
    AceCompleter.prototype.getCompletionsList = function (prefix) {
        var request = { editor: this.editor, prefix: prefix};
        return this.provider.getSuggestions(request);
    };
    return AceCompleter;
})();
exports.AceCompleter = AceCompleter;

//# sourceMappingURL=data:application/json;base64,
